# Vault URI
spring.cloud.vault.uri=${jeap.vault.url}

# Fail if secrets cannot be retrieved
spring.cloud.vault.fail-fast=true

# Use key/value secret backend and disable the generic backend
spring.cloud.vault.kv.enabled=true
spring.cloud.vault.generic.enabled=false

# Specify the backend path for the key-value (KV) secrets engine in Vault
spring.cloud.vault.kv.backend=${jeap.vault.kv.backend}
spring.cloud.vault.kv.default-context=${jeap.vault.kv.default-context}

# Authentication method
spring.cloud.vault.authentication=KUBERNETES
spring.cloud.vault.kubernetes.role=${jeap.vault.kubernetes.role}
spring.cloud.vault.kubernetes.kubernetes-path=${jeap.vault.kubernetes.kubernetes-path}
spring.cloud.vault.kubernetes.service-account-token-file=/var/run/secrets/kubernetes.io/serviceaccount/token


# Normally the vault-core dependency should be configured automatically, which can then be injected by the spring config import.
# But it does not work correctly for the KUBERNETES authentication method without bootstrap context.
# A properties file gets created and can be used (spring.config.import="vault://") but leads to two instances of vault beans (e.g. VaultRestClientFactory), which should be singleton instances - one from spring-cloud-starter -vault-config and one from vault-core.
# As a consequence vault should be disabled, even without bootstrap for Kubernetes environment, to interrupt the instantiation of the core beans from vault-core.
# The other properties for the vault-core dependency have to be still configured for the vault templates and operations, which are used for interactions with the vault api.
vault.fail-fast=true
vault.uri=${jeap.vault.url}

# Backend ~= secret engine
vault.kv.enabled=true
vault.kv.backend=${jeap.vault.kv.backend}
vault.kv.profile-separator='/'

# Sets the context name used by all applications (default/) or this specific application
vault.kv.default-context=${jeap.vault.kv.default-context}

# Authentication method
vault.authentication=KUBERNETES
vault.kubernetes.role=${jeap.vault.kubernetes.role}
vault.kubernetes.kubernetes-path=${jeap.vault.kubernetes.kubernetes-path}
# A file containing a JWT token for a pods service account is automatically mounted at
vault.kubernetes.service-account-token-file=/var/run/secrets/kubernetes.io/serviceaccount/token
